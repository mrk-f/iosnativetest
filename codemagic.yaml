workflows:
  testwf1:
    name: Test workflow 1
    instance_type: mac_mini
    max_build_duration: 40
    environment:
      vars:
        XCODE_PROJECT: "nativetestapp.xcodeproj"  # PUT YOUR WORKSPACE NAME HERE
        XCODE_SCHEME: "nativetestapp" # PUT THE NAME OF YOUR SCHEME HERE
        # iOS automatic code signing
        APP_STORE_CONNECT_ISSUER_ID: Encrypted(Z0FBQUFBQmdKVWdUYWZUZmxIa2kxUHYwdGlsVjNRbVk3WDZvZHhjZGxVU3YwQVZ4TjlQSTA0cXY1R0JCN1JRaGFBYTFPT2FRX09zdzdCQXRTUngxbXRSLUtPODB3ZU84MkN4Y2w4OXRxZFdEdktJMVBQbGpUbkdkZ21hUDJ6VnRGNFRmNGwyU1VCV0U=)
        APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(Z0FBQUFBQmdKVWZxYWgxckxzTGQ1SHpwN3c1Z3JkZUVvWWNzWjlzZTh1MVhWMGxrekFXYXl6UjZrVXozdzhBODZpdUZma2daNmhuOTZfX1dlZ3JvSTNvR1NkSElHZUxzUXc9PQ==)
        APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(Z0FBQUFBQmdKVXhVeXNUSDlvZkNDaVBaal84MjBGa1pJbHNWVlNCVk1FSWxsZV9FSlk5cm5fRUpacnJ5ZHVYZnhjS1FiTUVqdVpSWVMxd3Byem5TeG5aNk95bjdmVmptdlV5WlV2TGVISW1YRzBrcF9CcTlXVFdlZ2hfQmRGekpzMEdJVDkySkRobFBZY3dwc0NWcERFdk9KSE5WbGd1Z2VKZHJnb2trT05oalBJT2xRaWtILVl2aXY4NzBPVFlHWGJEOEFxUnI5SF81VHgtM2kyd0thZ0w2WHcxVVczd05fVWtwWjR3dkhWTzZObElfQzFOV25hNEdkRUt6dVp1QThPVl9YZVpvNkd4QWlWN1UyMVpUZzU5M0NJSVBybzV3X3FBdXFmSjRDaTRBQ2JzZzg5NEphVDZBcHUxbnN0bE51c0ozYkdMeFc5ZTA0OXNybXNEQXVTeVFqVUp0UlJLa0xyX1ctWU1pa1RHaE1sSGVVOGZPYmFzQ1FyWFMzOVYzd0JWSV9TQkFnZmJxZzdsZE40U1lESmdBeXJUQTM0Sm1nVzBCSmFLZEdkM0lrZ2JHbzhUaUxybz0=)
        CERTIFICATE_PRIVATE_KEY: Encrypted(Z0FBQUFBQmdKVXJabWtfYjZ6R05rakU1UkZzejZDaTBxTWNpd0hWQ0UyajlHcy0wekxfaHVud2w4VFg3ZXdDU0UxZjE4TU1TeUdvcU1ZQWJjNVBSNFB1MlVscjdIWHQzSVNQVHU4VkRSLVZ1bThRcnZXZlprZFA5UXgxdm92TlFkNHJ3N3pVQVRBSkw5MVpxQW5SS2dsNjJ5RUt3REQtSGFVSXlEdTFoRkpsWWtXdGtNUnhjSi1laERlb2RmaWpQVVIwYVEwYldlcXZZbFBHSUJsWnVKdHU4SVh5VU1xQV9SYmhJX0RWQ2dQVno0eWxkQjFScnZFVWRHYlA4MjAzMEZoMEhjTkMyOWxTVEtNNktvMUNTek5fR2dtTmtmWTZjN3plN2dvRURzTEtLTHBwbmk5cGRQbmJPNWtIdVpuYll3Z3dVZzAtdnpzd0ltU0xCSHBNclpidFFyeGwxbnB6UndsVllDUFZjQzZ6eHpEd2ZqOWY3dzJjNjFfWTBFZEtKNkVuSkxCclhaQWN3Yk43UUpmUUVFX0xpcnR4QkJVLTBWMWhLVVhvNUJFVjlPMWZ4QW5WQ0JaemdqRlpKN1FmQlhBaVF4Um1Kdm1MMGRsRkN0M1JjOFo3eVdINjdlWnd2Mk9VTGdHZzNrZ0pscDdKYjhaY2VqQXBPQ2duOHNzZHIyUXY3ZWtUeXZYaE5tRzZ5dGR2MlQ2bzFnMUVFd1lqVmhtUnlOT0VuMGRnOS1oemNyMm12U1ViY1RjSUVPNWpubzB2RnJCLTJqUTJ3Z3NOdkpUN08xZl9HQjkzSDV1bTdLMGFqOWhYUmJJY2ZHZGhBUTZETjNuekkxbkpKNy1ReHpFVGdiMzhoT2wtN2NPS250dUxTWXJUMWVlajdJMDAxc01RZFFueXdoWWhNUVZpdXM0U2JxMkFnY0NiU05xeDBQNEYyczdZRVRYQU15VmV0WGtXZEVwTTZ5X0dmVUNISl9ULW5JbUU0bTkwZzNnTU9MRTQ4NUUyeDhEZEcwRzJ1YUxRVkhWVlhoTmdYZFlCSGM4VVhXQW5aMHQ3SXpVbjd4NGNrWDR5Rnp1THduazhoNTJFQWV0ZkYzdE85Ynl2RmNsdjlVTTdpT19lSlB1Mk9TWWM5cXEyYk91alNwQzh5c2ZkU3EzU0trd0VacXlJYWtYZHlPNFFLWk90aUFQM0dPbG95ZVVVUzVucTdINnJrMUs5ZTNHOUNJNWZ4MThPVU5MampKeS1hYXpEYm1DOHpjS0RoWWl4NlNSaC1EaVZVTWc3UG8yaHZSUno4dE4tbFJoS0I4b054ckxGa29NbW9LdVBHRGlyZXctY3lESDJwXzVxVk5famdLSTRLQ0hqNGkyYnk1TG84Smlxenl5bDhnUE5xeWxyNWxyOHAzc0VSMTFIaklYTklhNUVxblFzVmk3SDluYXNmcWhkSUkxTVV0b2tiUlplbnlsSTQxdlYwQlo4QXE4ZFdWVnFKZ2E1UndIOFdGY1RrclotcXlJazA2WkxCcEpHU3ZyS1FhN0FNWmpEZ0J2RXhld3BEbUtFU0NVYlJURFFwb1cwcjhESlYxb0dTTFNGT0RfZXZfVHp6cmxhWUM4bUVxYjVuSHN2U3VndHVkNmJDVExSSk4zc2JoWlEtMWNmc3laUHB3SUliOEZ3VFhNdkJsbTBjdHU1ZGlrLWdXdjMxZF9qSml0WjBlSlF3UEF5emJKejdMc3JkMnJualFlNHRCQWJJTlo5R0xQcTA3V0kzdEJldUhfSkREOVRIYnlxcTRqdVIxN0xSY3VDRTE2MlNBb3BnaEVhX1V3S1VKS2lfdExYTjhjcU1aczlMbXdDRDl0WllFb1kzZG1lMHpqUlJwc1E1NGI4VGUtTzRrUGItblNWN2h1eWRWZVNWWHFfQm9BdTBRSm1DVXhlRVRGYVkwMWY5Snp4bV9tVmYyMGlmM09GYm1Tc3FCSTVEOXVoQnVHNFhHVVhlVzhnZUdjU0o1MHpLM2lVTmN5N05XVkRGR2tCWUR2MEZJbXQwQ3NSeGFaTXQwWTVGZFNvaE1SU2ZwMkQyRktOSTI4QWRjc3lXQndHWUhLZEVERGEySkNwTWx1bnlEa3gyUi1pVktLTWdNQmR0Y0V0LThydGJPZDNfVzB1OFFvRmxvVGZ6dFdsVDhvOHNFQ3dtZlVsbUNXSlM2Nmp1VndoM3lJR0dGZ2xnOVNUWHFIazNtbmZ0WC1mUm5kNGpDSmc4SnFDZTRLdGhaZDNTQUxpa1YxRWh0LXFEX2sxYllCUnU3eFFSdEpiZjlRUl9hSG14ak5pcS1HX0JlVUprcy1jQm5IaUpTTGx2cy10RERQY2FEVzlXbU10bFZEanVER29vWmJJZFBFTFQ5SlZDUTZsY3RFdGlSOFVxbDJrcENDcGtRd1BmLW1rSllrZmZpNjcwclJxQ1hnSWdYUVBPRHBNQTBhMnF3Um1HSF81OGpXQlBHZl9Qei11ZVJlcHFYYlYySV9MZ1BnUUJLN1N3eUhiSnlVNkRuRXVZQlM4NkZ0SzR0bmVTeUc0RTl5R0RRSS1XSUt2WTd1dm0taDZxdzdoR1lTQ0Rka0VJbml6Q0ktbXRKOUd6VE9vX0dMRkQzaGVtOHM4SUpWdkRKZWU5MDA3ZDRLR0lpVENOaVJ2QmVIVGVaZGNwR0Q4YjNVZEx0Z3ZRdWtGc0pxM3EwSld2SUVQZ1JNa0w2UVNUb2ZOUXBwR1YydVNORFRrMG5VQnhPLThSMThsWHNERjhOaXFFMXJwNTBUZnNYa1JLNmJkZnd1VTUzLVljRUtKM2VjbEU5OXE1QUdkdlRXWTlzaUpTZm0yYjNtaWJJcEFhMmtaUVR2UzRtVkpZYnFHV05NZXVFQ0ZubU9fOEJTckFwaXpuZFRpVFZ5clVIVjc1bFNaRzA4Vmg4YUF1LV9DWXlVS1oxOENiZzAxcnpMeEJ4TDdkVE0tUDFTUGRPbXhud0hMMDVTbmt2WmVNUWJaX0tXYndjV050c2U2R0VEQzFFUWxIdnlZdHUwbXVid0pFUVdvWWVxdHdWZ3dTbWZDaUNuZHVGNE1WVXYtQUxtOGFXTmJp)
        # Other stuff
      xcode: latest
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: 'labidas'
          include: true
          source: true
      cancel_previous_builds: false
    scripts:
      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: keychain initialize
      - name: Fetch signing files
        script: 
        ignore_failure: true
        - |
          java -version
          app-store-connect fetch-signing-files "com.mark.nativetestapp" \
            --type IOS_APP_DEVELOPMENT \
            --create
          shabang
          bangarang
      - name: Set up signing certificate
        script: keychain add-certificates
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Build versioning
        script: | 
          #!/bin/sh
          set -e
          set -x
          agvtool new-version -all $BUILD_NUMBER
          agvtool new-marketing-version 1.0.3
      - name: Build ipa for distribution
        script: xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
    
  testwf2:
    name: Test workflow 2
    instance_type: mac_mini
    max_build_duration: 40
    environment:
      vars:
        XCODE_PROJECT: "nativetestapp.xcodeproj"  # PUT YOUR WORKSPACE NAME HERE
        XCODE_SCHEME: "nativetestapp" # PUT THE NAME OF YOUR SCHEME HERE
        # iOS manual code signing
        FCI_CERTIFICATE: Encrypted(Z0FBQUFBQmdKbjhoRHFJYVRDcXE1b0l1cXNmUjF3Z3BMaUNMelJGOF9iMGVPcVp1d0pjM2JfQ0hNMW9TTWlwRElOaERwWUQxTDBybjk1QjlfX2s0YXo0MWpKZG9Oazg4TFlPZzdJLTVGeVJlZGpRcTRYQUJ3Rk1oa1lVbEM1MnlSQlFOTDhBWEREdE9nZlFCQU5GTF95OEZIVlVoYUdPY1N3UklNSnVjZXBhemZLdDF4VnlBMmE3QUNDeWVTaVQ3VURWb19kc3ZKdFJ3d0xGcEZPMnV4YWhERW5qX1h1dHdpZzdIZTNjZDFVaGlPcTVQdC1oMkRWU1FQVGprb0dxbC1yLVZrRkNrd2YxU2Y5czhZcjF3d19yN0dZWEhmcjFHa0lPV081MjhrTDYzWjZ3enp5UWVDU19aSk9WR1NVcWllVVlHMDFKQW5HY1lzVy1nOVgyTGxxb0ZnM0pDX1BpOEVjbVpraUFuTHRzN0dZbGhfZkdoZkJ2QXpLTHFsa0ZNSWZxT1dqUjlxeHBxQzM1ME96RlFWM00ta1BxX0lYUWxqSG9fTy1jVjVybUd5QnlXSFl4eFBhNXBDZmdFMjU1Zi0zTHFDSGlwbXpqekk4RlR1RjZIaTFCcGFoR2RRR25IU2RRN3l0THE1b3RWRTlZNnVpN21ORjVWbzY1bzF2bXpyRFFNSW1fbGV4dUY3YVhjNC1xcURTZTF5NmNhSXMtNFVWUXQxSlRmWjhWdnR4YXNtNnVGbUlHbTVrUDVSbFBLX1dUMU9vd0Y4Y2pEUl9jeTVVRUlTbmJ0NmVvNzFZWENKN3d3R3EyTTlqdURIRVltdzdENy1DUlZ2UDhSOTY2ajhaRlRjRTVhVkl0aDFVclNHeGtKLW11NERGU0pGWG9BdExJbW5rQXVVX2lQOS1FeTRMRkpmZDZ3TkFxTTBHOEdzcGNMc2dKVHNleWtCeG14ZGczaGJzVC0yQk1PY2U5dWxJUDhuSW0tVlhHcTIzUGYxTnJ3VmZSN3JzVXhsQ25teWFPODhnSW5SNTB5U3l0LXhyNTEwYnkzMkFJaHE0c3VaMGI2cmt4YjJ3MkFpbXJYeVRXTVlsSUx6TTdmVVBpVGw4X1J6YUViUnNfaG9tZEFWMmdxTkplQTZQc1lOdlJQUUNJS1BaUEJ5dEFKd3Jhb1o1OU1tdHZqczJYSnBJVjBUOHFRQmdweTBCNlhfMlhrU1RfaDF2NGZhZE1CZkx0NkNUWVBPRHJtdlpnTEdSaFBVaTMyVzdYMjQ0a1llaWRPU2hJMDBlTGl3SFZMQzdKYnVPaTNjN0N1MnZsaWFoYVo5akJlanczOTlVemlUeXRCcEdKaE9NaEczc1B5TERIakxLY1lVR1BVeTdHY0JBSEhpMHFxZlhjdERUb1JyeElEd1RTU1R2SVN4cGFxbGxjWnlmQlN5ZjNQX0NMMHdlMjFoMTljYWQtQ1BpUDBiNW9UdW5aeGpJaHFWM21IMzNJVldJOEd6bmxmcm5WdThpOFVSME93UVVfX1FkQlo0eDZGa1R0UUxYTUpiaXdDcEMxRHZOUm9sSkJOcUFxaTdIQjZKSVJFN0VsdnRocWJzVTZ5b1QyZG1qN0MyOVhpX2VQX0huU2pScVY5YlJCNEpuTTJmdjFDTllweUUtYVJheWtJVlBBZDZmQ29feV83M0Npd2o2YjVJSFIxeU9IZktVTzhnS2hEbmtndWlocktkTkc5SnA4dmEzRjdTSFRaYnBUaDNPSTNoNUN3QzBvV1A4WmhjN0Zvc2o3SEpwbjZZSmVWZ2hJWFBXaDBndThrSGFuRzA3YmxNVklIWndJcFlVS0lSd2w3WmZ5RGtMN3BqR0Z2MWN3TkV5ZGNoU0RHcVVPRUVZN0RaeHF2RWRZQ0VBTk11RU10Q0VlZ1dnd0tHLXUwWUJTaFloa05EUnlCc2w3MUw5ajl4MktPa2hvaUFsV1JmSHBHelVNQV9NMHgtc2JOM1lteXV2YUpIMHNEeDJnSnVtT3lTa0Q0UzhHdGhsYlN4UF9URGNvaDkxUUlHa0xOX3JWbkxaTHh0RWdJUWFzX18xSm5rUWx2N1VTSHVZUjFpMnEwZkctN25fcjlXcldUNk04YmlIOXd0a0xCQmRLX0VvRjNuS29FaXRYZWJMOTZXWTV2cmxZZ2Z1cE1KVFppZkxBUTlwMk5INXY0WFBLUGo3QlBxcWgwNHFTb1Q2Y2RSM2NjRG1IckRhVHptMEFVZXYxZWI4Y20zelFhNGFDdTJkMWZmdzVmRVdLcWNJVlFKZ0xxRnNFUEk3d25LTlJaQm5zZVRnRnJ5eDFyNTZwUV9obnRCcl9NVlJhdGo4cUxmNmFMZmFrcHVWWVJZNGh2eXpBdHZxTmt1QlFkVHZGOUh3cFh6RTd1bHVsVFI5UEtxUGJZX3RrckNVTnp6dnBOVl9pUldGWWo1bmQ3ZnlzSXBudUpJbmdOV29jZ1lnWjFrdXBWQnFrUDllRkpNTFEyMGp5ZmFjRm41WnM5SEd4SFlLd1NWdGFrcEtRelVjaXFuaDdCSHZYM3BxeTlVdWxTbE41SnhLemJRVlh5S25UXzVzTnNneGhEUUloV1Z1R2N2aHBqWUFFNTJUcEJEdVhyMzlqLW5LU04yTHF5Z0tkRGZPU0NCb1BRQUFsYVBoWFlWcU1ueUJNVzl1cS03d3pPd0FTUEQtUG5NeWxzTDRZTVFoSk10SEJILUxPakNXQ2hUTXNQWGkwR2N0YUhJQkZKUHRYZldBWjdSNXpGdlhLZlRNNHZKcVJYWG04ZEh4SWthY0VVRXBBV041dGhMMXViMllkZlFYV2tCVjdSZUFUTnRNQzRFVnQ0N1pVeXA2MVRUZmF5X2lYQVVWMkFGVldKVi0yYm4tekRTQ2dJdUJIbHFrOWFIY3RUMjA3TE56bklJTS1GdXhmMmZ3c0xJbTVCNW9zYW5KeXg0M1pXMEgwQ0hrLVI3V1RLUVpUQkxyMDN3MkhhdFBqODZzLV8tUnBFcUNzODBobDFva19zNlhDVFJoVkU1T3djNjVuemprS3pBeThENlN3STMzcE9yRzE0VzFheUdzNFVfZC1OdDAwakNMTko4amRtemttS2F2RWo5LW9YdTJuSFkzNzh2ZkdtQ05HYUVqcXVOeGdRaWN1NWEtRGt3c1lSWjA1U28xMFVMd3lXVUo3b0k4cS1TU21NbFdaSXB5VktoeHozNWlVMUpSNEZZaDJPWWxYdTBTY3N1bFpyTDJxQTczVm5Pc3hEYjN5bjFPWDZJY2txTkpJOC1lUkNaSWVnaUo5NVBkdVZfNExRS0pKY1hBRGVUc3BXa3RwMHRMM3g5Q1hFRjVaVnRvLWQ2TmRpOU9WNjFJZXRYZWItcVRzaXNLdEZtbzhqZURFM0hyczBzNTVpNG1FdUV5b0ZrbW1RbTBYTXBGdldEaGhtS05QZkVEWmUwSE5XNWdYOEZzd1pOeExpd2xBZzMzRVY1NTVzMWJGcENjYWh0bG81cFJseUM5X1U3cHNSNjdpYmZNNWc1anNaWUdELVFORGdDVUxNZ2hjVlNDdFdnU3lzVy00bGc2NUMySDZzQ3ppQUtHVGtLdVdsa19pYVBnUDlVelNtN2dxamJVOVhyU2RnX1N0VlpCWE9hUWdNWW0xQ1NnREx4Vmxjd3JFYUpHWkdpOVM5a0M2cUdjNG4wSEdMY1FTU0Q0ajY5Ry03OGh4ZkdUSFZGRDV6NGtZNWhwSk5ERUk1WE9BZ21nN29FbjEwYi1SWHBweGZubWI3VTVpdjJsSXQwU2VsSDBZeURaNm5ieHR5RGlRMy1ZdHdXTkMxOXI0czFpdHphNjVURHJOdmtIQ0tGRUpGOE5wbHNRTE5CRC1WVjNZX3ZaUUFobmNDZG1pVTJSYWNRdXpJems0VDg5aVlEeURtR2JzbEkwWTNCQ3VzdVQtSnJxUTlneFFkQWtscXVHNV9kLUU1R21VdU5xTU91SWFaS1U2ak5hYnFWeWdpeFJ6LWdNRFZPQzRvY1lOeGZmcmhGQVhCWHRuMzA3MkFtWGlYUlRTR19FSF9Oa3ZZSTRUc1hGZWlmdVJuVUh3Z1dxZEt3YjJ3dlNWazBuZ3V4Mk5VMlQ0UW93SHZ5QU1nVEU5amFVTndacVFJTTZiR0dtUkVNbFdvRGVQeTVGTGZ5TFdIcUhUd0p5X1lMUmJhcTdNNjF6OTFpZmR4ZW9zMDV2SW9DT2tQaWIyMy16U2lqNUFxWFVFNUVXZkF5VUlmSTZqT1dYSGRTN1RtMTJzRV9mSmNSajJyUlFPdFVWelRlRzlFMnFrd2ZYelNKRVJwUkZYOGljMklDMDRKWjNQYmpVUzB4ZHN1aks1aFlFd3o0MzB5aE8wR2ZIdGo1S1pyN2ZwZTZESVEzbTRHSHo3WDdaQVVTbUprV01DU2hQOExwU3dOaGZKVmdUQXV3b2tDS3ctejhXZTJEZHFiOFpOTDlfblhoQm5rVkl0OWkxRlBiSkZJWFZaaHB4blVwQWMxSDVXVjJYVVp2NUt4NTZyTkJ0WDFJWG02LVk2Y2lvUmNuNjFLU1RXUG9wclNkT1VxWlZLYzZua2o1Tzd3U1BraGVnVW44dTJqaWRLcnFrTFphZC04YVlTVkVtNlp0a1lKZHpjdFNLUGNHX2tWa2NwMlhTc1ZKM25hMEFHUUcwQ2dsWm5hRERlM21pVnZoU3ZSMWlPdnd1Z0ZvbDVjZ1Q4aXdwUXVLMUVFb3NsUXAyY25qRTFLMzlnM1Fwb3V6OGtqV3NWVkNETHktX3A5TFdMRVpKZGRPMnZic3pncUJMWkVBOTFyRm0tVmExVjNkN3VkVy00d216SXZVdGZjcGpQV05mSThhek94NXZsanBOdlJqYU95cURVXzRMbFdpMUR1N2pfTFdlODAzVzE3ZkhUdFR0cjVZbnNZb0JuSmZTOGVMR3lndm1VUEN6LWUxUWtXT0NEbUVVcW5OWGZmWEtJSFdSMVUzSWVMWTZtVFZvTnVUSFotNXFxMlpzNFhuWFA5ZnV3YVMtR3JheEJQSldGTVIyYWwycTdpSFdodFJRVWk4ZXdNVGplU2w0QUEyNVloU3h3X3J2UVFLd1VmbHhhdzRIbXE2WlhKclhLTXV4QXgzSjBwc3JJUEJrdDMtU1RYM3h5RzdWemVVaXYwTWY2ZzlDZEkyYVdpMUYtVlNtZDhRUWNUaEhLVVNuN1ZGa0hVMGNOanRtN2RLM0cwUmE2b3FCaGlTUUxTN3M3dElNQ1IxYnpDSml1ODM5VElaZTM2UHBFb0tsMXEzWDdwWkRweFZZOFp4aTRCRDcyUjQ1YjNTYXhaZVF2Z3dnUUl6dkxjU0dkZDJzMnZjVUgxTWNXNkk0OWNiZjdDam5lVEdReF8tUmlNeVNWdktRdFZjakxNNkRJeWpwTnI0SV9Yb1lRUnFZXy1GU0VwcEI4QmhlMHdCbWFIdXNpU0gzTVp0ZGFEUGxSV01pWjJYbm5IR0ZlajhXY1I2cU9zWjhGdzFUaWZMQVlOZXVEQkJxVFdXcEhJM25BUUxpajhlVWk2dDFSa0ZfbkVxQVNNWjI1X1EzZi15ZUI1UG1aTXJ2bHh3bm04cUxOQ0RrMEQ2UktzT19PMmliTHlqcGQycDQxc3RhRlF2NkpsMnprSTVmam1vV2RGdnY2MXkyaHNQTmhzbnJKUVM0Z19fakFnSnFsNzV5WlJoeE9sY1hWcWNIQ2l6Q2ZpSHByc3dwMDVKckU4aXFvYmE2VXFua0pfVHFOZ0JBU1JCWmdhaDZheFFVV0o4T1JKNTk1OE80a19fNDVRcmtua1pIZUV6djd3YjR0SkJuRHlvQkFWRzd3My01ekhFUHdUeFlIMk5QUEI5Z3NqQ2Fsajl3dXRCU0VYVlpZSFZCWEVrcF9BSm80WEhCN25yd2hERlBlR0lEbUlBUU02dEtnaVplQnptcDFiWTJsclVBTEVsRV9yMEh1SmVLMUVmV2ZNWVUtREZkZUJzeGVMU1Q2S3V5ay00a19hYmVOczNPWEJhRGxobnlUWHJhUEJKdUdpazZPZXdMeDNPZGRIb0hMT0lmWjROeWlEekdMV3pQV0xvc0lxbGJYa1NWRDdUR1I5MDBZTk5SM0JOM0VyOFdpcUdOZGtzMWhnT1pSZzlTM3dyakRUeFphT29pUVZiempyaGctOG9OeHNWM3lubEMzaHFsal81bXFQa0JkMjVyN2hkTUp3eVhrMDhlNG9aLVVjNFU0LVNqUVU4UmRUUGhDOUFlaDhaX3dMdU5udjV0LTkydkJOaHlVSUdrTmRIbmhlQjJreDN0STUwLWNxNHhQNldIc0RJTG85Z1pacDRrZTFiVnlWbHp3cGNwZjFHYmhWLTNWbi1FUExuSkFSNml6dFFWVFpMU3BlRWp4SV93OFY4eXAtXzBZdG5zZTluRlJ4ZVBvdXVPRGhORTdiVnd3NS1hRExlZjlwU204bXY5amtYZ3Q2dnUwZGtGMUlsNThodDJDM1dLNTlva3BYTWVNS25DTHpaNFQzSVFfQXBJM0xGcWRKN09wLTRSZVkxMENWZ2Ffc0t0c1hGLUpSVlIwczVmcDNJYjFCcEMyYW1iYm15MjZaVm5yRWNXYnlFTm1vRFh6LUp1V2NXbHk1V3AxeFBCTTBMY09TbmsxWFhvMHFJZWY5dFA4UmdJTmRaeGtOaU9ZdllvcEFjWEFqazRRemZ3WEFzdXZPR1AtQ1BiVExlcmdvMG9PZDd1NUZmNEZOMWdibGlHYmJJNzZsT05XN0dhRVlQUnltZmhHMXd2cXVkc0FBazY3WWJEbGNLTktIZHV5ckpjX3dmcThrRUVsbXFQRG9iUTIyYjlSMDVDeXdzTGtJX2hOYk45N19jVlA1THR1YmhZMzc0NDJkYUpsYUVjUXRSSUU5b1lHcjU1OXRZajdhb29vdEVvYUQyWlZ2Yk5aSlFyVHRMWVNUWkl5MjloMmV3WEFDVTZoZDY1OHc0dzhKbEZabEVobmtveFlFMzJZYUJxWmNleTVXUFBRRURLS2wxbHhIMXJ1Y0VuZFYxc25pbjJNVDhkcTByazlpaks1NWJMTWIza0V4LTNRcXNGLXpHYVE2SGNHUHQxaGQ4SlFFazBhb3A5RFFzLVl1T1B2VDRYMUtZZUxmeGNFVjVqdmFYMEo3QVlpLVl0SmZteUh3YW1SbVMwUk4wRVdySjMwR1BFUTdSV0prUWMwTGc4aThMdUpiU0NRTDhURjBlNWh3dEc1X05rNHkzcnRWUHROYkZvd3JMMmdZNXJkT0xrcGZ0YklVRXRZaG1ZeXlTcTN0d2U2UWlOQkNTUTFZaTJ6dHYwaHFkY1RhY001UFdmWXp6UjlhLWp3cnZFQ3lPUEJqTzNXbkRnUGVkMUVxdmtIVWY1SkVlSy1rRzNpWHpybEpISk5UWmFtdmJUQzRfWklMbVJhRy0tRzZVYUlOT1Fhc0U1SUhTczJCNkZnNUV4amdyeDVhOTdtOU5RLUZMcU9uVnFmNW81WGNTaUtLU1Jsc28xdkJ3X2x4WGlkdHRVRTNVNkJSRlB5OEc5MEVEUlJrMFc0ZW9yX1ZRaDBDZ2VyaEt1Q056Z003WjE3TkpzbVhRNDhOa2VfRExUWl9nMDliR3gwdk5Uc19GZjdyTGQ2VHVfcWRjU1drMmJidnBmbl9IRTFKLUNvNk5YMzlIZmVwNXkwV3hqT0lNSk5heXd1UV85b3JsMkZpdmZBR29YdVdDSTV1TzdzQjlEUT0=)
        FCI_PROVISIONING_PROFILE: Encrypted()
      xcode: latest
    scripts:
      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: keychain initialize
      - name: Set up Provisioning profiles from environment variables
        script: |
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
          echo "Saved provisioning profile $PROFILE_PATH"      
      - name: Set up signing certificate
        script: |
          echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          # when using a certificate that is not password-protected
          keychain add-certificates --certificate /tmp/certificate.p12 
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Build versioning
        script: | 
          #!/bin/sh
          set -e
          set -x
          agvtool new-version -all $BUILD_NUMBER
          agvtool new-marketing-version 1.0.3
      - name: Build ipa for distribution
        script: xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
