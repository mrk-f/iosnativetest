workflows:
  testwf1:
    name: Test workflow 1
    instance_type: mac_mini
    max_build_duration: 40
    environment:
      vars:
        XCODE_PROJECT: "nativetestapp.xcodeproj"  # PUT YOUR WORKSPACE NAME HERE
        XCODE_SCHEME: "nativetestapp" # PUT THE NAME OF YOUR SCHEME HERE
        # iOS automatic code signing
        APP_STORE_CONNECT_ISSUER_ID: Encrypted(Z0FBQUFBQmdKVWdUYWZUZmxIa2kxUHYwdGlsVjNRbVk3WDZvZHhjZGxVU3YwQVZ4TjlQSTA0cXY1R0JCN1JRaGFBYTFPT2FRX09zdzdCQXRTUngxbXRSLUtPODB3ZU84MkN4Y2w4OXRxZFdEdktJMVBQbGpUbkdkZ21hUDJ6VnRGNFRmNGwyU1VCV0U=)
        APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(Z0FBQUFBQmdKVWZxYWgxckxzTGQ1SHpwN3c1Z3JkZUVvWWNzWjlzZTh1MVhWMGxrekFXYXl6UjZrVXozdzhBODZpdUZma2daNmhuOTZfX1dlZ3JvSTNvR1NkSElHZUxzUXc9PQ==)
        APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(Z0FBQUFBQmdKVXhVeXNUSDlvZkNDaVBaal84MjBGa1pJbHNWVlNCVk1FSWxsZV9FSlk5cm5fRUpacnJ5ZHVYZnhjS1FiTUVqdVpSWVMxd3Byem5TeG5aNk95bjdmVmptdlV5WlV2TGVISW1YRzBrcF9CcTlXVFdlZ2hfQmRGekpzMEdJVDkySkRobFBZY3dwc0NWcERFdk9KSE5WbGd1Z2VKZHJnb2trT05oalBJT2xRaWtILVl2aXY4NzBPVFlHWGJEOEFxUnI5SF81VHgtM2kyd0thZ0w2WHcxVVczd05fVWtwWjR3dkhWTzZObElfQzFOV25hNEdkRUt6dVp1QThPVl9YZVpvNkd4QWlWN1UyMVpUZzU5M0NJSVBybzV3X3FBdXFmSjRDaTRBQ2JzZzg5NEphVDZBcHUxbnN0bE51c0ozYkdMeFc5ZTA0OXNybXNEQXVTeVFqVUp0UlJLa0xyX1ctWU1pa1RHaE1sSGVVOGZPYmFzQ1FyWFMzOVYzd0JWSV9TQkFnZmJxZzdsZE40U1lESmdBeXJUQTM0Sm1nVzBCSmFLZEdkM0lrZ2JHbzhUaUxybz0=)
        CERTIFICATE_PRIVATE_KEY: Encrypted(Z0FBQUFBQmdKVXJabWtfYjZ6R05rakU1UkZzejZDaTBxTWNpd0hWQ0UyajlHcy0wekxfaHVud2w4VFg3ZXdDU0UxZjE4TU1TeUdvcU1ZQWJjNVBSNFB1MlVscjdIWHQzSVNQVHU4VkRSLVZ1bThRcnZXZlprZFA5UXgxdm92TlFkNHJ3N3pVQVRBSkw5MVpxQW5SS2dsNjJ5RUt3REQtSGFVSXlEdTFoRkpsWWtXdGtNUnhjSi1laERlb2RmaWpQVVIwYVEwYldlcXZZbFBHSUJsWnVKdHU4SVh5VU1xQV9SYmhJX0RWQ2dQVno0eWxkQjFScnZFVWRHYlA4MjAzMEZoMEhjTkMyOWxTVEtNNktvMUNTek5fR2dtTmtmWTZjN3plN2dvRURzTEtLTHBwbmk5cGRQbmJPNWtIdVpuYll3Z3dVZzAtdnpzd0ltU0xCSHBNclpidFFyeGwxbnB6UndsVllDUFZjQzZ6eHpEd2ZqOWY3dzJjNjFfWTBFZEtKNkVuSkxCclhaQWN3Yk43UUpmUUVFX0xpcnR4QkJVLTBWMWhLVVhvNUJFVjlPMWZ4QW5WQ0JaemdqRlpKN1FmQlhBaVF4Um1Kdm1MMGRsRkN0M1JjOFo3eVdINjdlWnd2Mk9VTGdHZzNrZ0pscDdKYjhaY2VqQXBPQ2duOHNzZHIyUXY3ZWtUeXZYaE5tRzZ5dGR2MlQ2bzFnMUVFd1lqVmhtUnlOT0VuMGRnOS1oemNyMm12U1ViY1RjSUVPNWpubzB2RnJCLTJqUTJ3Z3NOdkpUN08xZl9HQjkzSDV1bTdLMGFqOWhYUmJJY2ZHZGhBUTZETjNuekkxbkpKNy1ReHpFVGdiMzhoT2wtN2NPS250dUxTWXJUMWVlajdJMDAxc01RZFFueXdoWWhNUVZpdXM0U2JxMkFnY0NiU05xeDBQNEYyczdZRVRYQU15VmV0WGtXZEVwTTZ5X0dmVUNISl9ULW5JbUU0bTkwZzNnTU9MRTQ4NUUyeDhEZEcwRzJ1YUxRVkhWVlhoTmdYZFlCSGM4VVhXQW5aMHQ3SXpVbjd4NGNrWDR5Rnp1THduazhoNTJFQWV0ZkYzdE85Ynl2RmNsdjlVTTdpT19lSlB1Mk9TWWM5cXEyYk91alNwQzh5c2ZkU3EzU0trd0VacXlJYWtYZHlPNFFLWk90aUFQM0dPbG95ZVVVUzVucTdINnJrMUs5ZTNHOUNJNWZ4MThPVU5MampKeS1hYXpEYm1DOHpjS0RoWWl4NlNSaC1EaVZVTWc3UG8yaHZSUno4dE4tbFJoS0I4b054ckxGa29NbW9LdVBHRGlyZXctY3lESDJwXzVxVk5famdLSTRLQ0hqNGkyYnk1TG84Smlxenl5bDhnUE5xeWxyNWxyOHAzc0VSMTFIaklYTklhNUVxblFzVmk3SDluYXNmcWhkSUkxTVV0b2tiUlplbnlsSTQxdlYwQlo4QXE4ZFdWVnFKZ2E1UndIOFdGY1RrclotcXlJazA2WkxCcEpHU3ZyS1FhN0FNWmpEZ0J2RXhld3BEbUtFU0NVYlJURFFwb1cwcjhESlYxb0dTTFNGT0RfZXZfVHp6cmxhWUM4bUVxYjVuSHN2U3VndHVkNmJDVExSSk4zc2JoWlEtMWNmc3laUHB3SUliOEZ3VFhNdkJsbTBjdHU1ZGlrLWdXdjMxZF9qSml0WjBlSlF3UEF5emJKejdMc3JkMnJualFlNHRCQWJJTlo5R0xQcTA3V0kzdEJldUhfSkREOVRIYnlxcTRqdVIxN0xSY3VDRTE2MlNBb3BnaEVhX1V3S1VKS2lfdExYTjhjcU1aczlMbXdDRDl0WllFb1kzZG1lMHpqUlJwc1E1NGI4VGUtTzRrUGItblNWN2h1eWRWZVNWWHFfQm9BdTBRSm1DVXhlRVRGYVkwMWY5Snp4bV9tVmYyMGlmM09GYm1Tc3FCSTVEOXVoQnVHNFhHVVhlVzhnZUdjU0o1MHpLM2lVTmN5N05XVkRGR2tCWUR2MEZJbXQwQ3NSeGFaTXQwWTVGZFNvaE1SU2ZwMkQyRktOSTI4QWRjc3lXQndHWUhLZEVERGEySkNwTWx1bnlEa3gyUi1pVktLTWdNQmR0Y0V0LThydGJPZDNfVzB1OFFvRmxvVGZ6dFdsVDhvOHNFQ3dtZlVsbUNXSlM2Nmp1VndoM3lJR0dGZ2xnOVNUWHFIazNtbmZ0WC1mUm5kNGpDSmc4SnFDZTRLdGhaZDNTQUxpa1YxRWh0LXFEX2sxYllCUnU3eFFSdEpiZjlRUl9hSG14ak5pcS1HX0JlVUprcy1jQm5IaUpTTGx2cy10RERQY2FEVzlXbU10bFZEanVER29vWmJJZFBFTFQ5SlZDUTZsY3RFdGlSOFVxbDJrcENDcGtRd1BmLW1rSllrZmZpNjcwclJxQ1hnSWdYUVBPRHBNQTBhMnF3Um1HSF81OGpXQlBHZl9Qei11ZVJlcHFYYlYySV9MZ1BnUUJLN1N3eUhiSnlVNkRuRXVZQlM4NkZ0SzR0bmVTeUc0RTl5R0RRSS1XSUt2WTd1dm0taDZxdzdoR1lTQ0Rka0VJbml6Q0ktbXRKOUd6VE9vX0dMRkQzaGVtOHM4SUpWdkRKZWU5MDA3ZDRLR0lpVENOaVJ2QmVIVGVaZGNwR0Q4YjNVZEx0Z3ZRdWtGc0pxM3EwSld2SUVQZ1JNa0w2UVNUb2ZOUXBwR1YydVNORFRrMG5VQnhPLThSMThsWHNERjhOaXFFMXJwNTBUZnNYa1JLNmJkZnd1VTUzLVljRUtKM2VjbEU5OXE1QUdkdlRXWTlzaUpTZm0yYjNtaWJJcEFhMmtaUVR2UzRtVkpZYnFHV05NZXVFQ0ZubU9fOEJTckFwaXpuZFRpVFZ5clVIVjc1bFNaRzA4Vmg4YUF1LV9DWXlVS1oxOENiZzAxcnpMeEJ4TDdkVE0tUDFTUGRPbXhud0hMMDVTbmt2WmVNUWJaX0tXYndjV050c2U2R0VEQzFFUWxIdnlZdHUwbXVid0pFUVdvWWVxdHdWZ3dTbWZDaUNuZHVGNE1WVXYtQUxtOGFXTmJp)
        # Other stuff
      xcode: latest
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: 'labidas'
          include: true
          source: true
      cancel_previous_builds: false
    scripts:
      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: keychain initialize
      - name: Fetch signing files
        script: |
          app-store-connect fetch-signing-files "com.mark.nativetestapp" \
            --type IOS_APP_DEVELOPMENT \
            --create    
      - name: Set up signing certificate
        script: keychain add-certificates
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Build versioning
        script: | 
          #!/bin/sh
          set -e
          set -x
          agvtool new-version -all $BUILD_NUMBER
          agvtool new-marketing-version 1.0.3
      - name: Build ipa for distribution
        script: xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
    
  testwf2:
    name: Test workflow 2
    instance_type: mac_mini
    max_build_duration: 40
    environment:
      vars:
        XCODE_PROJECT: "nativetestapp.xcodeproj"  # PUT YOUR WORKSPACE NAME HERE
        XCODE_SCHEME: "nativetestapp" # PUT THE NAME OF YOUR SCHEME HERE
        # iOS manual code signing
        FCI_CERTIFICATE: Encrypted(Z0FBQUFBQmdKbnB1X2NRLWZOX01YQjRVZFlwZEpqeUpLWFphbkRiWjhHUnkySzlNblI2NUZ5Z1ZzNW0zQ1ZJb1YwS3FCWEFOd19wMThIMkNzUWdFbHhVdW1CVTMxU252dlZnbE40YVlFcnlCR2xYVzBhd1RkWE54MTdIM1ZoaEUzLXNwZzlORl9uOXJTX3VCOW9HdHRfbURLblhRY1JQbXJfN0NUaXNzQkNtVmdmYUs0T2pzSW1MVGhLS2d1aEdfaVlJMHctTjRSQWdEOEJNdExqZzliSi14UTlMc05GWXR5TFl6V1ViMjlzZEZnbHN2ZEE5QjdiSUplT3NzSWd6RmkyOWtmRjJBRXJLZGc3NWlfNkxsa2NpODJNVWZOcFhyT20tQUlBVURZVkszdVRVbHR1ckZILV9TdnNCVmJnby1nTTBCRTIzTE5FX2pROTM3WXoxdjJ1QTNzdnZGLXpuRTFmbXRnMk51QTM4M3Z2d0pZeFhVT3BJLWQ0NWJ2WFg4ZjlqQW5JMnN0YVJMWGVtQzJqU0lqUUFTaU8zOTUwdjdMMmFOeGJJQkQyaHhvdFd6dXZwamhiS2lLeDU5OC1uNThBTzVVTGF0ZmgxWDh6bWRIeUhlTHA0VXV4QWF3VERnQl94TzZoYXNSWVlxVUw4ZWlKaG53Uk0weUtHZjl2bnNlQ3BFUVZCY2Zjd3FyaW1IY21zOUY2NE1vUml4a05SVnZxa3VPMWxSS28tOEZURFdkYUhraXdGa3g5R0hwZndJRG04SjhuZEJna1lHSUwyYk1Pd2o4dmdPdVlhRTBRQkxRTnVSZXdROHE1ZDdPRWgzYUFPTGl2bGRUMFlMX0FxNXZSTnVOWEJGZ1lON25UVlJIa29Sd01ZMnNVeFNEYXFTUFJyOEh4emZoSnp2UmJfZXM2d1U2YlZSdlJRUXpkd1FZSXZiNG1IRnJGY0pyZFV1YkowUWplR2tzWHNfR0ZJdEpHVDhsdHJTTzlTc1VPclk4WmJEZ2NaWFVKTldFU1BhTFZjcm43dG1tZmhLMmgwZjdjVWg2MWo3cGJMVEllQkdmWElpNm1IQWI1bmNxdXFhcmFLZVVHcUpkdDR5d2dWUm4xTkl6Y29DQXQ1UUQ3VHo2TzdrNUNiZ0M5S1RhakhrS2IzMEJiWWd6dEQzTGlZcm1xcy00Q1RGVU1iN1NQQXo2LVFNRHptb0RoU0U4bks0NE5jNkpGQzdRMWVtMVVUd3hXdzNUR3pZRlQ0SlBxZkhBbWNfS1I2SllCMnE5dlV1Mlo4U3pobnQ2el9maTZLbUtqaTctV2lEVG9lZTB0REpsZGo1TGFRY1l6ZHFHeW5kUzdxcWtHbmNsS3ROUDZoT1VqY29YMHExU0Fqa2dLaGx6UUkyTUhGZ1B3dk9BZ1Z1UURHN3JERTQ2TC15Z0lYQ05kSEZDdzA2VFJOdG1va0w4T0U3Q2pGNEVMUUJvYThlQjVYOFZaaURINWc3Yl84VDdTQnVKZUtnVW9FNUhjMXB4Y05KMThSSUxHc3ZOVDIzZGU5a1dtTWROV1A3UmNUenVpRTU5UEhhMVVhZkt6Y0RPRTNWaHpLUlJNN2FUX01YeVdxR3c3ckhUZkllSFN3bGhUUl9qXzBnd2s1MW9FUExCSl9fQnpVNHprWlIwLWJyVGM5UTdIS0g3ZmNiZWoyRk5iaW41NEI4YUYxWFR2b0stSkNHODZIcTAxSDlpSlZnQkJuU1gxMV9rTUxGX1E5Qm93QjJHdFJVMlE2b2pQdTVDZXZnMFM0OGJlaTVpaTVfOG04YjFvT054Ukg0QVYzaTFTekk3YU1Femhvc2s0VDJ6YnQ1aHVQWmFYeWR1YzZBQ0JzUEstWUJ0bUlPNlR2Z0VSUEdzb1d6WDJXejJTX2RvZlcwd1dBN0IwWm5ZRFF1dmJMTVZ1TzNFZ0FkaEhPbXpWQUN6Z3R6c0VLOXBkVm1WYzlPZVBtSlFGYkhING44VUFuVE5fY25GRkphOF9YV2lEbmpKY3ZzUlhvb0RlVUZlZ2dtR2otX0NXb2U1cU5ocl95UG9LTmRoa2J3VXR5OTNETXVuVzc5VW52TWxZa3BzelFpYTU1a2pjb0F2YnFhYUpIUXh6aHh6QnBpZ0NsMnhuUUstc1I5b0tmcXBxeUZ4QWlIajJKODl0U3RremZ3SzZLVm1oYS1mSDhTOC0zWlVfbmtsQnZnaHUtU25UdERSckdaeXNkLXBCZWRaRWY3bWkyREdGdUtzSlRxVjlGekhhNWFheFpSYWY4N3ZGYVFTTkRaMnlqaEMzRjF2a2tzMFZ4MEc0cjBJVUNrM0I1Y0pSQjJkV3I4N3dnU1htT0tIOEhnTWZUeDlUaDc3SW5WSmlmdFg4d2ZXbUpYdnIwRXd4VkVwOWpEXzlITlhVVWd0M3NBS05vbDVIVzJzLUR1Y3ZNOG1IVzg1MVRTbU4yQUNzVWdnbldPMWxGSDVVMGJQMFJnTWxTZFBuaXBOSVlWR1J1VHNxSlJDQTV1a01zaUtfOGVobDJuVWlSTWlnS3I3VHA3bEx3bHVybEdzblB5QmJ1VUJ3eU9wcDBsYXpGUmg0RGxERlBwUk01VkJpYjExT1ZNcXp0S0dsckloTXhzV09Nc05vVnZiMlBaWDFZbi15eGhzWHBCTDVoc3ctZDFkc0NuWlRReUNURWtRT2xHMWJrcXFwaHg1VHVWdDRuaGgtTkZLOWo5LVlFQUJaQUptX214Y3YtTjF6dlA3Q2E5THR4X3JDMHgzMEllWWJMck5FOS1hOG9Qa3VzaWZrOXQwcUlCMVZkS1d6enE5bl9kYkdKZEpfZ00tbUNzNVRZM21zdUc2QnVjdThxc2c1S2luOS13M1RQSTZlX2lGeFdMb2JULUM1aDVMc0tEbFVxZzdPejc2ODRCX1g0aGkxamRpMnlReUlrT2lSNF9vU1p3WHVNcVRaQzZ6TDNIcmxGa1hQbWtjaGNBSE1OSFBnV2RiNDFwQWhQNlNZTm9QcWU3RVJiOUlYLW0tdGIzd2l1aEp3RGw4XzR6REZncUp0ZDNxRTcyNTQxcExGRV8tWDgzaVBRbEJ5c01tUkR5b0FiSE9mU0RzaGwtR1ZfUW5wN0tWYWw3WFl6MVFUVl9SdXpIYnhjMzRXSGlNSFNsbU43T29Cc05SYVY3cENCbHljVTh6aXg1Z0Q2N1o3U3hSRlVoZGZzVlN1elg3M1RBcXRpOGNUdzd5Y2RFSmpYVk1JeUZCSDloTnlyY1Jqd1MyUTVNS1QwLTRTZXdYZFpWTmRpdmE1OGNEak9vbUg5cTNXTFRleDc4Z3VOdnpnVDhuWnk2NHFPaEhfMWhDaWRtbnFWek5xeHFMR2NBaVZuMlRYOVRlY2l5bWJ3ZU1LaTBLc0liaE5aZnRMdkQzdHMyTy00NXVOeVUtc25qeDVvYl9EMVNGMnZCNXJvamZxNEFEaDdsSW5rd2JSbUpHWWVYeVFuTFZYQUhpbUhFWEdpVkU4YVlsZVFJNUw0b01zMTlaMEx3dVBURDZwX0RlSjNXVXpxNndzckdqSzloMmhlR2hrV012WU8wQmlucVpvRklDZnVQSlZDZ3NhbGJYZDRabGh4eGNPU2pWOGZTTWlka3EtNk9fY1FQV0pwR3pXUjNLSjI4S0EyVHF5S3lJLUU1Z0VKUTQzenlwY204TzYzOGN6dVFLNkZjM2RGSnBpb1hsdmtheGFMaFdqOXJrTTFsZjc0dWN5OHRzQjkwRmxxdTFTTWFtaUR2SnEyTlRnem1McHFTNWY0NEk4c005ejZ0RVlELW81Z3VncTdvdG9RM1dWX3Fhd2RiWGk4UVAyRzhDZlowQlJVb3htR2lpMTNycjU2Yk9mclpMdDNVQjZ2YUtjeGUwZ0d2MGxqLXFxalJ1enVxd0FiZTBHTklMNk1vNVlzYnlmUG5NMTl4aDVCUmtDNENfdURDaWNUSDdZU3c5SEhPWDRxU05lamNZMVMtZ0x2dGpRTy1Rcm5iazBXbkhwSGU5eGU2ck1OWVgxZWhjNnRwNldOMlBzdFBGLTh5R1hYOUdybTlldVBtanpQZHhZLWtBemxwRzRvUmhSQUVNVDA0b1dneE9kM0xiZ3YzMkhXOXJwN1NtZzkyUDZaYnJVc1BWd2hTRVRYQnh3cEpacWk0WWpnRXZZVmh5c3BmREU4dkg0ODhFSHJxekVDZk02TlhRREp6bFl6eU45bUtTaFlMR3dLTmx4aXFiYkhtU0dvcDdselNOV2pKd0cyWnNSNTZHNHF2d1RkTXd1SWl0ajdzQjN1TWpFYmUyMFZWZlZyRUR3RWRLbVAyX1lzTjlxREZHTzRrZXVNNExGeERYbXc5Y3N1VzlsZy1COFFsSTRJXzhhVGZWTU1yNlp0UXVqWlZ1blp6LW14NURZT2ZMbE1laE50UVlndTdWcjBpdjg4dTJUWFJZeHhiMm1XcV90bGYxdmtaQW9oYmJ2NjNMLVlHZ0h4Q0pwaWc0eWhSYzNZY25BQkYzQmJqemVick84UXEyWnRPNG9USl9mWkZFb0s1T1FYVzBfNS11dlZWN29SS3FMVXRNTE9DVEVKTVBBUUY1WlpYaWUyNlVKSW1vSWZtUUstUGhqM0NaOEh2WTlGS29MZkFrRlZSaXhfQWVVNWhxajNjZnk4NE5paTd4MExaOURLeUNKZEZWTFdmS2dUTmlhNGFTSzQ2ekFlSnJOSWVjWklOTm84blBUeVlpenk1T0hGdmk4NHZ6VGFCMUE1bk1xR3ZnWFdxZkZlaGFma2JwQXpmLXU1N3pWQS0xQ3Uwd1U3SGNhd09jTm9pQ2lRVm5nZVRTaUNBUXU0Q3VWZVR6QklMYm1FZUxNMFpSVWVyYXpQaVFfXzBINmdaOTAzT2VNUUI5TFo4cGZ1WDduaVA5aEtiLVdpSUdEUW81bUhwOWxRclFGTTRqYnhTckJack5TQ2ZxYXpDaXVXQlVybW03RHFuTFhieXVaQ0NBQXk5VTRTQkNmbFhjbkd0R2tldkxwTEdWNkNrUWg3WHcxMmducUx1ODZYSWlhVHlkMkRTVldnVTRUM0lNaUhYaDhUSXcxZzRtZDhxQ0Flamdjc1pVNkxEUndPQjZXc013akZXenFvcGFldF9jUXNvblM3LTFOTGV3Rmtsd0JOWXVYdThoWjU4MFBOZmJxUEgzVTFpZ09uM2hzMk5SS0I2eWVsTTNXZ0I3QjJmSWkxdXo5NVQ4elcxYlU2RzVEN3p1TlhZbXU2MTZoMmlCWVE0RTI5cUkzVi12SU5rOTQzdXJqRnBza095UkJFaVR6T3pHZzY1anFVUmJVQ1JuRjhPdFI4aXVZVVZQWnFLV2lwdFJNWGNDNXNTZmp4UkZ0Y2VZVW5oUTFaOU1fWTlsSm52ZFJRQVBaWGNQWWRsaGVFejlPd2dvbmk3MUpYUlBZSVpoTl9DRmx4eVVPMTlfV1ZHc2FqVVpmS0YySlZ4ZmZTdjZzSXpXWHU5eXh0QWpMbmJzNDh0LTNkbVRheGFJdnMwazNnMEhOUTNsT3JxNlp4UkJZalI3TFAxLVdWMFNCZGxOMnppSWRJTzczZnFjN2U3NWxheFUtb2NQdzZqSXp3TDcwSWNUU1puaUUzNi0yRjF1WUFuS2t2ZkNrOE9aeS1mTzEyTWg0dVlOMUhYNHJOWko5cnNiMDZyUDN1bWU4RkxKenpJcmtyZElKTGlVMkh1NWRBMXZsRGJlNFBXTzRyWWg2Q3FjakZ4ZXhQTW4xNC02TWxQSmRteU5QUW1PVEVXamNHYzl6MTBhNGI3dHlscmhkNEllVlp1ekhuc3BCZ09tU0NHUDBuNnNWa21SbmFIcXRtMmZab1N5Q0l6OTRzVFJ4aGd3RHZfTGE2QVlkOG9HekFocTJrbm9XSjhNOTJvOXVrWThJVm1PbE1JekZjbXB6OTYtcFV3SUptUWtmelFQWFFEYTdidTdZUHJYU2NDcVRkZGMwMGNuUkdfMkFOUm85NmwxeE9JRW95alRlOFM0NjRkVzZDTTdmZC14QWozZzl2NC1BMUgzM289)
        FCI_PROVISIONING_PROFILE: Encrypted()
      xcode: latest
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: 'labidas'
          include: true
          source: true
      cancel_previous_builds: false
    scripts:
      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: keychain initialize
      - name: Set up Provisioning profiles from environment variables
        script: |
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
          echo "Saved provisioning profile $PROFILE_PATH"      
      - name: Set up signing certificate
        script: |
          echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          # when using a certificate that is not password-protected
          keychain add-certificates --certificate /tmp/certificate.p12 
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Build versioning
        script: | 
          #!/bin/sh
          set -e
          set -x
          agvtool new-version -all $BUILD_NUMBER
          agvtool new-marketing-version 1.0.3
      - name: Build ipa for distribution
        script: xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
